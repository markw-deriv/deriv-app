name: analyze
description: Analyze all packages
inputs:
  REF_NAME:
    description: 'Git ref name'
    required: true
    default: 'test'
  NODE_ENV:
    description: 'Node environment'
    required: false
    default: 'test'
  CROWDIN_WALLETS_API_KEY:
    description: 'Crowdin wallets api key'
    required: false
  DATADOG_CLIENT_TOKEN:
    description: 'Datadog client token'
    required: false
  DATADOG_APPLICATION_ID:
    description: 'Datadog application id'
    required: false
  DATADOG_CLIENT_TOKEN_LOGS:
    description: 'Datadog client token for logs'
    required: false
  DATADOG_SESSION_REPLAY_SAMPLE_RATE:
    description: 'Datadog session replay sample rate'
    required: false
  DATADOG_SESSION_SAMPLE_RATE:
    description: 'Datadog session sample rate'
    required: false
  GITHUB_TOKEN:
    description: 'Github token for downloading artifacts'
    required: true
  GD_API_KEY:
    description: 'Google drive api key'
    required: false
  GD_APP_ID:
    description: 'Google drive app id'
    required: false
  GD_CLIENT_ID:
    description: 'Google drive client id'
    required: false
  RUDDERSTACK_KEY:
    description: 'Rudderstack key'
    required: false
  GROWTHBOOK_CLIENT_KEY:
    description: 'Growthbook key'
    required: false
  GROWTHBOOK_DECRYPTION_KEY:
    description: 'Growthbook decryption key'
    required: false
  DATADOG_SESSION_SAMPLE_RATE_LOGS:
    description: 'Datadog session sample rate for logs'
    required: false
  REMOTE_CONFIG_URL:
    description: 'Remote config backup URL'
    required: true
  IS_GROWTHBOOK_ENABLED:
    description: 'Is growthbook enabled'
    required: true

runs:
  using: composite
  steps:

  - name: Get latest commit hash from master
    id: latest_commit
    run: |
      git fetch origin master
      LATEST_COMMIT=$(git rev-parse origin/master)
      echo "LATEST_COMMIT=$LATEST_COMMIT" >> $GITHUB_ENV
    shell: bash

  - name: Check if previous artifact exists
    id: artifact_check
    run: |
      ARTIFACT_EXISTS=$(curl -s -H "Authorization: Bearer ${{ github.token }}" "https://api.github.com/repos/${{ github.repository }}/actions/artifacts?name=reports-${{ env.LATEST_COMMIT }}" | jq '.total_count' | awk '{print $1}')
      if [[ $ARTIFACT_EXISTS -gt 0 ]]; then
        echo "ARTIFACT_EXISTS=true" >> $GITHUB_ENV
      else
        echo "ARTIFACT_EXISTS=false" >> $GITHUB_ENV
      fi
    shell: bash

  - name: Get artifact URL
    id: get_artifact_url
    run: |
      ARTIFACT_URL=$(curl -s -H "Authorization: Bearer ${{ inputs.GITHUB_TOKEN }}" \
        "https://api.github.com/repos/${{ github.repository }}/actions/artifacts?name=reports-${{ env.LATEST_COMMIT }}" | \
        jq -r '.artifacts[0].archive_download_url')
      echo "ARTIFACT_URL=$ARTIFACT_URL" >> $GITHUB_ENV
    shell: bash

  - name: Download artifact
    if: env.ARTIFACT_URL != 'null'
    run: |
      curl -L -H "Authorization: Bearer ${{ inputs.GITHUB_TOKEN }}" \
        "${{ env.ARTIFACT_URL }}" \
        -o artifact.zip
      unzip artifact.zip -d old
      cd old
      unzip reports.zip
    shell: bash

  - name: Analyze all packages
    env:
      NODE_ENV: ${{ inputs.NODE_ENV }}
      CROWDIN_WALLETS_API_KEY: ${{ inputs.CROWDIN_WALLETS_API_KEY }}
      DATADOG_APPLICATION_ID: ${{ inputs.DATADOG_APPLICATION_ID }}
      DATADOG_CLIENT_TOKEN: ${{ inputs.DATADOG_CLIENT_TOKEN }}
      DATADOG_CLIENT_TOKEN_LOGS: ${{ inputs.DATADOG_CLIENT_TOKEN_LOGS }}
      DATADOG_SESSION_REPLAY_SAMPLE_RATE: ${{ inputs.DATADOG_SESSION_REPLAY_SAMPLE_RATE }}
      DATADOG_SESSION_SAMPLE_RATE: ${{ inputs.DATADOG_SESSION_SAMPLE_RATE }}
      DATADOG_SESSION_SAMPLE_RATE_LOGS: ${{ inputs.DATADOG_SESSION_SAMPLE_RATE_LOGS }}
      IS_GROWTHBOOK_ENABLED: ${{ inputs.IS_GROWTHBOOK_ENABLED }}
      GD_API_KEY: ${{ inputs.GD_API_KEY }}
      GD_APP_ID: ${{ inputs.GD_APP_ID }}
      GD_CLIENT_ID: ${{ inputs.GD_CLIENT_ID }}
      RUDDERSTACK_KEY: ${{ inputs.RUDDERSTACK_KEY }}
      GROWTHBOOK_CLIENT_KEY: ${{ inputs.GROWTHBOOK_CLIENT_KEY }}
      GROWTHBOOK_DECRYPTION_KEY: ${{ inputs.GROWTHBOOK_DECRYPTION_KEY }}
      REF_NAME: ${{ inputs.REF_NAME }}
      REMOTE_CONFIG_URL: ${{ inputs.REMOTE_CONFIG_URL }}
      NODE_OPTIONS: "--max_old_space_size=4096"
    run: npm run build:prod && npm run analyze:stats && npm run analyze:build
    shell: bash

  - name: Compare report to main
    id: diff
    if: env.ARTIFACT_URL != 'null'
    run: |
      DIFF_OUTPUT=$(node .github/workflows/compareReports.js)
      echo "DIFF_OUTPUT<<EOF" >> $GITHUB_ENV
      echo "$DIFF_OUTPUT" >> $GITHUB_ENV
      echo "EOF" >> $GITHUB_ENV

  - name: Comment on PR with bundle diff
    if: github.event_name == 'pull_request' && env.ARTIFACT_URL != 'null'
    uses: actions/github-script@v5
    with:
      script: |
        const diffOutput = `${{ env.DIFF_OUTPUT }}`;
        github.rest.issues.createComment({
          owner: context.repo.owner,
          repo: context.repo.repo,
          issue_number: context.issue.number,
          body: `${diffOutput}`
        });


  - name: Zip all report.json files
    run: |
      zip -r reports.zip packages/*/report.json
    shell: bash

  - name: Upload reports.zip
    uses: actions/upload-artifact@v4
    with:
      name: report-${{ github.sha }}
      path: reports.zip
      retention-days: 3
